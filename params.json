{"name":"Rbatch","tagline":"ruby-based batch framework","body":"[[English]](https://github.com/fetaro/rbatch/blob/master/README.md \"english\") [[Japanese]](https://github.com/fetaro/rbatch/blob/master/README.ja.md \"japanese\")\r\n\r\nRBatch:Ruby-base Simple Batch Script Framework\r\n=============\r\n\r\nAbout RBatch\r\n--------------\r\nThis is a Ruby-base Batch Script Framework. RBatch offer a convenient function as a framework, when you write a batch script such as \"data backup script\" or \"proccess start script\".\r\n\r\nThere are following functions. \r\n\r\n* Auto Logging\r\n* Auto Config Reading\r\n* External Command Wrapper \r\n* Directory Structure convention\r\n* Double Run Check\r\n\r\nThis work on only Ruby 1.9.x or more later.\r\n\r\n### Auto Logging\r\nUse Auto Logging block, RBatch automatically write to logfile.\r\nLog file default location is \"(script file path)/../log/YYYYMMDD_HHMMSS_${PROG_NAME}.log\" .\r\nIf exception occuerd, then RBatch write stack trace to logfile.\r\n\r\nsample\r\n\r\nscript : ./bin/sample1.rb\r\n```\r\nrequire 'rbatch'\r\n\r\nRBatch::Log.new(){ |log|  # Logging block\r\n  log.info \"info string\"\r\n  log.error \"error string\"\r\n  raise \"exception\"\r\n}\r\n```\r\n\r\nlogfile : ./log/20121020_005953_sample1.log\r\n```\r\n# Logfile created on 2012-10-20 00:59:53 +0900 by logger.rb/25413\r\n[2012-10-20 00:59:53 +900] [INFO ] info string\r\n[2012-10-20 00:59:53 +900] [ERROR] error string\r\n[2012-10-20 00:59:53 +900] [FATAL] Caught exception; existing 1\r\n[2012-10-20 00:59:53 +900] [FATAL] exception (RuntimeError)\r\n    [backtrace] test.rb:6:in `block in <main>'\r\n    [backtrace] /usr/local/lib/ruby192/lib/ruby/gems/1.9.1/gems/rbatch-1.0.0/lib/rbatch/auto_logger.rb:37:in `initialize'\r\n    [backtrace] test.rb:3:in `new'\r\n    [backtrace] test.rb:3:in `<main>'\r\n```\r\n\r\n### Auto Config Reading\r\n\r\nRBatch easy to read config file (located on \"(script file path)/../conf/${PROG_NAME}.yaml\")\r\n\r\nsample\r\n\r\nconfig : ./conf/sample2.yaml\r\n```\r\nkey: value\r\narray:\r\n - item1\r\n - item2\r\n - item3\r\n```\r\n\r\nscript : ./bin/sample2.rb\r\n```\r\nrequire 'rbatch'\r\np RBatch::config\r\n=> {\"key\" => \"value\", \"array\" => [\"item1\", \"item2\", \"item3\"]}\r\np RBatch::config[\"key\"]\r\n=> \"value\"\r\n\r\n# If key does not exist , raise exception\r\np RBatch::config[\"not_exist\"]\r\n=> Raise Exception\r\n```\r\n\r\n### External Command Wrapper \r\nRBatch provide a function which wrap external command (such as 'ls').\r\n\r\nThis function return a result object which contain command's STDOUT, STDERR ,and exit status.\r\n\r\nsample\r\n```\r\nrequire 'rbatch'\r\nr = RBatch::cmd(\"ls\")\r\np r.stdout\r\n=> \"fileA\\nfileB\\n\"\r\np r.stderr\r\n=> \"\"\r\np r.status\r\n=> 0\r\n```\r\n\r\n### Directory Structure Convention\r\n\r\nFollow the axiom of \"convention over configuration\", RBatch restrict file naming rule and directory structure.\r\n\r\nFor exsample, If you make \"bin/hoge.rb\", you should name config file to \"conf/hoge.yaml\". And the name of log file is decided on \"log/YYYYMMDD_HHMMSS_hoge.rb\"\r\n\r\nIn this way, maintainability and readability of batch script get higher.\r\n\r\n```\r\n./\r\n |-bin\r\n |  |- hoge.rb\r\n |  |- bar.rb\r\n |-conf\r\n |  |- hoge.yaml\r\n |  |- bar.yaml\r\n |-log\r\n    |- YYYYMMDD_HHMMSS_hoge.log\r\n    |- YYYYMMDD_HHMMSS_bar.log\r\n```\r\n\r\n### Double Run Check\r\n\r\nForbit double run of the RBatch script by writing option \"forbid_double_run: true\" to the common configuration file.\r\n\r\nQuick Start\r\n--------------\r\n### Step1: Install\r\n\r\n```\r\n# gem install rbatch\r\n```\r\n\r\n### Step2: Make directories\r\n\r\n```\r\n$ mkdir bin log conf\r\n```\r\n\r\n### Step3: Write batch script \r\n\r\nfor bin/backup.rb\r\n```\r\nrequire 'rbatch'\r\n\r\nRBatch::Log.new(){|log|\r\n  log.info( \"start backup\" )\r\n  result = RBatch::cmd( \"cp -p /var/log/message /backup\")\r\n  log.info( result )\r\n  log.error ( \"backup failed\") if result.status != 0\r\n}\r\n```\r\n\r\n### Step4: Run\r\n\r\n```\r\n$ ruby bin/backup.rb\r\n```\r\n\r\n### Step5: Check\r\n\r\nLog file is generated automatically. \r\n\r\n```\r\n$ cat log/YYYYMMDD_HHMMSS_backup.log\r\n\r\n# Logfile created on 2012-10-20 00:19:23 +0900 by logger.rb/25413\r\n[2012-10-20 00:19:23 +0900] [INFO ] start backup\r\n[2012-10-20 00:19:23 +0900] [INFO ] {:stdout=>\"\", :stderr=>\"cp: cannot stat `/var/log/message': No such file or directory\\n\", :status=>1}\r\n[2012-10-20 00:19:23 +0900] [ERROR] backup failed\r\n```\r\n\r\n\r\nManual\r\n--------------\r\n\r\n### RBatch Grobal Config File\r\n\r\nIf you make follow config file, option value effect to all scripts.\r\n\r\n```\r\n(script file path)/../conf/rbatch.yaml\r\n```\r\n\r\nConfig Sample\r\n```\r\n# RBatch Common Config\r\n#\r\n# This file format is YAML\r\n#\r\n\r\n# -------------------\r\n# Global setting\r\n# -------------------\r\n\r\n# Forbit Script Double Run\r\n#\r\n#   Default : false\r\n#\r\n# If this option is true, two same script cannot start at the same time. \r\n#\r\n#forbid_double_run: true\r\n#forbid_double_run: false\r\n\r\n# -------------------\r\n# Cmd setting\r\n# -------------------\r\n\r\n# Raise Exception\r\n#\r\n#   Default : false\r\n#\r\n# If command exit status is not 0, raise exception.\r\n#\r\n#cmd_raise : true\r\n#cmd_raise : false\r\n\r\n\r\n# -------------------\r\n# Log setting\r\n# -------------------\r\n\r\n# Log File Name\r\n#\r\n#   Default : \"<date>_<time>_<prog>.log\"\r\n#\r\n#   Reservation words\r\n#   <data> --> replace to YYYYMMDD date string\r\n#   <time> --> replace to hhmmss time string\r\n#   <prog> --> Program file base name (except extention)\r\n#\r\n#log_name : \"<date>_<time>_<prog>.log\"\r\n#log_name : \"<date>_<prog>.log\"\r\n\r\n# Log Output Directory\r\n#\r\n#   Default : \"(Script path)/../log\"\r\n#\r\n#log_dir : \"/tmp/log\"\r\n\r\n# Append log or not\r\n#\r\n#   Default : ture\r\n#\r\n#log_append : true\r\n#log_append : false\r\n\r\n# Log Level\r\n#\r\n#   Default : \"info\"\r\n#   Value   : \"debug\",\"info\",\"wran\",\"error\",\"fatal\"\r\n#\r\n#log_level : \"debug\"\r\n#log_level : \"info\"\r\n#log_level : \"warn\"\r\n#log_level : \"error\"\r\n#log_level : \"fatal\"\r\n\r\n# Print log-string both file and STDOUT\r\n#\r\n#   Default : false\r\n#\r\n#log_stdout : true\r\n#log_stdout : false\r\n\r\n# Delete old log files\r\n#\r\n# If this is true, delete old log file when RBatch::Log.new is called.\r\n# A log file to delete is a log file which was made by the RBatch::Log instance, \r\n# and log filename format include \"<date>\".\r\n#\r\n#   Default : false\r\n#\r\n#log_delete_old_log: true\r\n#log_delete_old_log: false\r\n\r\n# The day of leaving log files\r\n#\r\n#   Default : 7\r\n#\r\n#log_delete_old_log_date: 14\r\n\r\n\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}